

ARG NODE_VERSION=22.9.0


# ---------------------------------------------------------------------------------------
# S t a g e   d i s t
# ---------------------------------------------------------------------------------------



FROM node:${NODE_VERSION}-alpine3.20 AS dist

# ggf. Python fuer Argon2
ENV PYTHONUNBUFFERED=1




RUN <<EOF

# https://explainshell.com/explain?cmd=set+-eux


set -eux

# apk = Alpine Package Keeper


# https://wiki.alpinelinux.org/wiki/Alpine_Package_Keeper


# https://docs.alpinelinux.org/user-handbook/0.1a/Working/apk.html

apk update
apk upgrade




# https://dl-cdn.alpinelinux.org/alpine/v3.20/main/x86_64
# https://dl-cdn.alpinelinux.org/alpine/v3.20/community/x86_64
# https://pkgs.alpinelinux.org/package/v3.20/main/x86_64/python3
# https://pkgs.alpinelinux.org/package/v3.20/main/x86_64/make
# https://pkgs.alpinelinux.org/package/v3.20/main/x86_64/gcc
# https://pkgs.alpinelinux.org/package/v3.20/main/x86_64/g++
# https://pkgs.alpinelinux.org/package/v3.20/main/x86_64/build-base

apk add --update --no-cache python3 make=4.4.1-r2 gcc=13.2.1_git20240309-r0 g++=13.2.1_git20240309-r0 build-base=0.5-r3
ln -sf python3 /usr/bin/python
npm i -g --no-audit --no-fund npm
EOF


# USER node





WORKDIR /home/node

COPY src ./src


# https://docs.docker.com/engine/reference/builder/#run---mounttypebind
RUN --mount=type=bind,source=package.json,target=package.json \
  --mount=type=bind,source=package-lock.json,target=package-lock.json \
  --mount=type=bind,source=nest-cli.json,target=nest-cli.json \
  --mount=type=bind,source=tsconfig.json,target=tsconfig.json \
  --mount=type=bind,source=tsconfig.build.json,target=tsconfig.build.json \
  --mount=type=cache,target=/root/.npm <<EOF


set -eux
# ci (= clean install) mit package-lock.json
npm ci --no-audit --no-fund
npm run build
EOF


# ------------------------------------------------------------------------------
# S t a g e   d e p e n d e n c i e s
# ------------------------------------------------------------------------------

FROM node:${NODE_VERSION}-alpine3.20 AS dependencies

RUN <<EOF

set -eux
apk update
apk upgrade
apk add --update --no-cache python3 make=4.4.1-r2 gcc=13.2.1_git20240309-r0 g++=13.2.1_git20240309-r0 build-base=0.5-r3
ln -sf python3 /usr/bin/python
npm i -g --no-audit --no-fund npm


EOF


#USER node



WORKDIR /home/node

RUN --mount=type=bind,source=package.json,target=package.json,readonly=false \
  --mount=type=bind,source=package-lock.json,target=package-lock.json,readonly=false \
  --mount=type=cache,target=/root/.npm <<EOF
set -eux
# ci (= clean install) mit package-lock.json
# --omit=dev: ohne devDependencies
npm i --no-audit --no-fund --omit=dev --omit=peer
EOF

# ------------------------------------------------------------------------------
# S t a g e   f i n a l
# ------------------------------------------------------------------------------

FROM node:${NODE_VERSION}-alpine3.20 AS final


# Anzeige bei "docker inspect ..."
# https://specs.opencontainers.org/image-spec/annotations
# https://spdx.org/licenses
# MAINTAINER ist deprecated https://docs.docker.com/engine/reference/builder/#maintainer-deprecated


LABEL org.opencontainers.image.title="buch" \
  org.opencontainers.image.description="Appserver buch mit Basis-Image Alpine" \
  org.opencontainers.image.version="2024.10.1-bookworm" \
  org.opencontainers.image.licenses="GPL-3.0-or-later" \
  org.opencontainers.image.authors="Juergen.Zimmermann@h-ka.de"


RUN <<EOF


set -eux
apk update
apk upgrade
apk cache clean
rm -rf /tmp/*
EOF


WORKDIR /opt/app


USER node


COPY --chown=node:node package.json .env ./
COPY --from=dependencies --chown=node:node /home/node/node_modules ./node_modules
COPY --from=dist --chown=node:node /home/node/dist ./dist
COPY --chown=node:node src/config/resources ./dist/config/resources
EXPOSE 3000


# Bei CMD statt ENTRYPOINT kann das Kommando bei "docker run ..." ueberschrieben werden


# "Array Syntax" damit auch <Strg>C funktioniert


ENTRYPOINT ["/usr/local/bin/node", "dist/main.js"]